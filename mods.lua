local v0={};bit32={};v0["N%0"]=32;v0["P%0"]=(5 -3)^v0["N%0"] ;bit32.bnot=function(v11)v11=v11%v0["P%0"] ;return (v0["P%0"] -1) -v11 ;end;bit32.band=function(v12,v13)if (v13==(729 -474)) then return v12%(493 -237) ;end if (v13==(161475 -95940)) then return v12%(168813 -103277) ;end if (v13==(4955445012 -660477717)) then return v12%(4294967915 -(555 + 64)) ;end v12,v13=v12%v0["P%0"] ,v13%v0["P%0"] ;v0["r%0"]=931 -(857 + 74) ;v0["p%0"]=1;for v50=569 -(367 + 201) ,v0["N%0"] do local v51,v52=v12%(1 + 1) ,v13%2 ;v12,v13=math.floor(v12/(1425 -(630 + 793)) ),math.floor(v13/2 );if ((v51 + v52)==(6 -4)) then v0["r%0"]=v0["r%0"] + v0["p%0"] ;end v0["p%0"]=(929 -(214 + 713)) * v0["p%0"] ;end return v0["r%0"];end;bit32.bor=function(v16,v17)if (v17==255) then return (v16-(v16%256)) + 64 + 191 ;end if (v17==(10307 + 55228)) then return (v16-(v16%(66413 -(282 + 595)))) + (67448 -(1789 + 124)) ;end if (v17==(4294968061 -(745 + 21))) then return 4294967295;end v16,v17=v16%v0["P%0"] ,v17%v0["P%0"] ;v0["r%0"]=1637 -(1523 + 114) ;v0["p%0"]=1 + 0 ;for v54=1 -0 ,v0["N%0"] do local v55,v56=v16%2 ,v17%(1067 -(68 + 997)) ;v16,v17=math.floor(v16/(7 -5) ),math.floor(v17/(1272 -(226 + 1044)) );if ((v55 + v56)>=1) then v0["r%0"]=v0["r%0"] + v0["p%0"] ;end v0["p%0"]=(1 + 1) * v0["p%0"] ;end return v0["r%0"];end;bit32.bxor=function(v20,v21)v20,v21=v20%v0["P%0"] ,v21%v0["P%0"] ;v0["r%0"]=0 -0 ;v0["p%0"]=118 -(32 + 85) ;for v58=1 + 0 ,v0["N%0"] do local v59,v60=v20%(8 -6) ,v21%2 ;v20,v21=math.floor(v20/(2 + 0) ),math.floor(v21/(1 + 1) );if ((v59 + v60)==(958 -(892 + 65))) then v0["r%0"]=v0["r%0"] + v0["p%0"] ;end v0["p%0"]=(4 -2) * v0["p%0"] ;end return v0["r%0"];end;bit32.lshift=function(v24,v25)if (math.abs(v25)>=v0["N%0"]) then return 0 -0 ;end v24=v24%v0["P%0"] ;if (v25<0) then return math.floor(v24 * ((1819 -(1703 + 114))^v25) );else return (v24 * ((3 -1)^v25))%v0["P%0"] ;end end;bit32.rshift=function(v26,v27)if (math.abs(v27)>=v0["N%0"]) then return 0;end v26=v26%v0["P%0"] ;if (v27>0) then return math.floor(v26 * ((352 -(87 + 263))^ -v27) );else return (v26 * (2^ -v27))%v0["P%0"] ;end end;bit32.arshift=function(v28,v29)if (math.abs(v29)>=v0["N%0"]) then return 0;end v28=v28%v0["P%0"] ;if (v29>(180 -(67 + 113))) then v0["add%0"]=0 -0 ;if (v28>=(v0["P%0"]/(5 -3))) then v0["add%0"]=v0["P%0"] -((2 + 0)^(v0["N%0"] -v29)) ;end return math.floor(v28 * ((4 -2)^ -v29) ) + v0["add%0"] ;else return (v28 * ((16 -(9 + 5))^ -v29))%v0["P%0"] ;end end;bit32={};v0["N%1"]=24 + 8 ;v0["P%1"]=(378 -(85 + 291))^v0["N%1"] ;bit32.bnot=function(v30)v30=v30%v0["P%1"] ;return (v0["P%1"] -(3 -2)) -v30 ;end;bit32.band=function(v31,v32)if (v32==(1207 -(802 + 150))) then return v31%(689 -433) ;end if (v32==(66715 -(1123 + 57))) then return v31%65536 ;end if (v32==(4294967295 -0)) then return v31%(4294967653 -(47 + 310)) ;end v31,v32=v31%v0["P%1"] ,v32%v0["P%1"] ;v0["r%0"]=0 + 0 ;v0["p%0"]=1 + 0 ;for v62=1,v0["N%1"] do local v63,v64=v31%2 ,v32%(7 -5) ;v31,v32=math.floor(v31/(6 -4) ),math.floor(v32/(999 -(915 + 82)) );if ((v63 + v64)==2) then v0["r%0"]=v0["r%0"] + v0["p%0"] ;end v0["p%0"]=2 * v0["p%0"] ;end return v0["r%0"];end;bit32.bor=function(v35,v36)if (v36==255) then return (v35-(v35%(724 -468))) + 35 + 220 ;end if (v36==65535) then return (v35-(v35%65536)) + 38178 + 27357 ;end if (v36==4294967295) then return 4294967295;end v35,v36=v35%v0["P%1"] ,v36%v0["P%1"] ;v0["r%0"]=0 -0 ;v0["p%0"]=1 + 0 ;for v66=1188 -(1069 + 118) ,v0["N%1"] do local v67,v68=v35%2 ,v36%(1476 -(1329 + 145)) ;v35,v36=math.floor(v35/(973 -(140 + 831)) ),math.floor(v36/(1852 -(1409 + 441)) );if ((v67 + v68)>=1) then v0["r%0"]=v0["r%0"] + v0["p%0"] ;end v0["p%0"]=(720 -(15 + 703)) * v0["p%0"] ;end return v0["r%0"];end;bit32.bxor=function(v39,v40)v39,v40=v39%v0["P%1"] ,v40%v0["P%1"] ;v0["r%0"]=0 + 0 ;v0["p%0"]=1;for v70=1,v0["N%1"] do local v71,v72=v39%(4 -2) ,v40%(3 -1) ;v39,v40=math.floor(v39/(1 + 1) ),math.floor(v40/2 );if ((v71 + v72)==(1 -0)) then v0["r%0"]=v0["r%0"] + v0["p%0"] ;end v0["p%0"]=2 * v0["p%0"] ;end return v0["r%0"];end;bit32.lshift=function(v43,v44)if (math.abs(v44)>=v0["N%1"]) then return 0;end v43=v43%v0["P%1"] ;if (v44<(0 -0)) then return math.floor(v43 * (2^v44) );else return (v43 * ((2 + 0)^v44))%v0["P%1"] ;end end;bit32.rshift=function(v45,v46)if (math.abs(v46)>=v0["N%1"]) then return 791 -(368 + 423) ;end v45=v45%v0["P%1"] ;if (v46>0) then return math.floor(v45 * (2^ -v46) );else return (v45 * ((6 -4)^ -v46))%v0["P%1"] ;end end;bit32.arshift=function(v47,v48)if (math.abs(v48)>=v0["N%1"]) then return 18 -(10 + 8) ;end v47=v47%v0["P%1"] ;if (v48>(0 -0)) then v0["add%0"]=0;if (v47>=(v0["P%1"]/(1264 -(1091 + 171)))) then v0["add%0"]=v0["P%1"] -((7 -5)^(v0["N%1"] -v48)) ;end return math.floor(v47 * ((1 + 1)^ -v48) ) + v0["add%0"] ;else return (v47 * (2^ -v48))%v0["P%1"] ;end end;v0["TABLE_TableIndirection%0"]={};v0["TABLE_TableIndirection%0"]["TABLE_TableIndirection%0"]={};v0["TABLE_TableIndirection%0"]["TABLE_TableIndirection%0"]["a%0"]=16164 + ((((4306 -(416 + 26)) + 364101) -(876124 -601728)) -(29011 + 38589)) + ((337876 -146924) -(111076 -(145 + 293))) ;a=v0["TABLE_TableIndirection%0"]["TABLE_TableIndirection%0"]["a%0"] + ((543 -(44 + 386)) -((86 -60) + (1553 -(998 + 488)))) + ((6057 -4838) -(38 + 81 + 997)) ;v0["TABLE_TableIndirection%0"]["TABLE_TableIndirection%0"]["b%0"]=985416 + 218040 ;v0["TABLE_TableIndirection%0"]["TABLE_TableIndirection%0"]["c%0"]=1231243 -(201 + 571) ;v0["TABLE_TableIndirection%0"]["TABLE_TableIndirection%0"]["d%0"]=8024619 -(116 + 1022) ;if (v0["TABLE_TableIndirection%0"]["TABLE_TableIndirection%0"]["c%0"]>v0["TABLE_TableIndirection%0"]["TABLE_TableIndirection%0"]["b%0"]) then print("true");end if ((1 + 0 + v0["TABLE_TableIndirection%0"]["TABLE_TableIndirection%0"]["d%0"])>v0["TABLE_TableIndirection%0"]["TABLE_TableIndirection%0"]["c%0"]) then print("obfuscate the conditions!");end print("Clicking [Strings] will completely hide this string!");do function sieve_of_eratosthenes(v74)v0["TABLE_TableIndirection%0"]["TABLE_TableIndirection%0"]["is_prime%0"]={};for v80=4 -3 ,v74 do v0["TABLE_TableIndirection%0"]["TABLE_TableIndirection%0"]["is_prime%0"][v80]=(1 + 0)~=v80 ;end for v82=7 -5 ,math.floor(math.sqrt(v74)) do if v0["TABLE_TableIndirection%0"]["TABLE_TableIndirection%0"]["is_prime%0"][v82] then for v91=v82 * v82 ,v74,v82 do v0["TABLE_TableIndirection%0"]["TABLE_TableIndirection%0"]["is_prime%0"][v91]=false;end end end return v0["TABLE_TableIndirection%0"]["TABLE_TableIndirection%0"]["is_prime%0"];end v0["TABLE_TableIndirection%0"]["TABLE_TableIndirection%0"]["primes%0"]=sieve_of_eratosthenes(622 -(14 + 188) );for v76,v77 in pairs(v0["TABLE_TableIndirection%0"]["TABLE_TableIndirection%0"]["primes%0"]) do if v77 then print("Prime found: "   .. v76 );end end end print("How to obfuscate best?");
